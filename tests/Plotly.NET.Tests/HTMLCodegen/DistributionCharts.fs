module Tests.DistributionCharts

open Expecto
open Plotly.NET
open Plotly.NET.LayoutObjects
open Plotly.NET.TraceObjects
open Plotly.NET.GenericChart
open System

open TestUtils.HtmlCodegen

let histoChart =
    let rnd = System.Random(5)
    let x = [for i=0 to 500 do yield rnd.NextDouble() ]
    Chart.Histogram(X = x, UseDefaults = false)
    |> Chart.withSize(500, 500)

[<Tests>]
let ``Histogram charts`` =
    testList "DistributionCharts.Histogram charts" [
        testCase "Histo data" ( fun () ->
            // the string is too big to be here fully.
            [
                "var data = [{\"type\":\"histogram\",\"x\":[0.33836984091362443,0.2844184475412678,0.2629626417825756,0.6253758443637638,0.46346185284827923,0.9283738280312968,0.1463105539541275,0.9505998873853124,0.5961332552116985"
                """0.7608672612164483,0.8280196519699039,0.040246858280267035,0.0017312127173557937],"marker":{"pattern":{}}}];"""
            ]
            |> chartGeneratedContainsList histoChart
        );
        testCase "Histo layout" ( fun () ->
            "var layout = {\"width\":500,\"height\":500};"
            |> chartGeneratedContains histoChart
        );
    ]

let box1Chart =
    let y =  [2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1.]
    let x = ["bin1";"bin2";"bin1";"bin2";"bin1";"bin2";"bin1";"bin1";"bin2";"bin1"]
    Chart.BoxPlot(X = x, Y = y,Jitter=0.1,BoxPoints=StyleParam.BoxPoints.All, UseDefaults = false)

let box2Chart =
    let y =  [2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1.]
    let x = ["bin1";"bin2";"bin1";"bin2";"bin1";"bin2";"bin1";"bin1";"bin2";"bin1"]
    Chart.BoxPlot(X = y,Y = x,Jitter=0.1,BoxPoints=StyleParam.BoxPoints.All,Orientation=StyleParam.Orientation.Horizontal, UseDefaults = false)

let box3Chart =
    let y =  [2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1.]
    let y' =  [2.; 1.5; 5.; 1.5; 2.; 2.5; 2.1; 2.5; 1.5; 1.;2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1.]
    [
        Chart.BoxPlot(data = y , orientation = StyleParam.Orientation.Horizontal, Name="bin1",Jitter=0.1,BoxPoints=StyleParam.BoxPoints.All, UseDefaults = false);
        Chart.BoxPlot(data = y', orientation = StyleParam.Orientation.Horizontal, Name="bin2",Jitter=0.1,BoxPoints=StyleParam.BoxPoints.All, UseDefaults = false);
    ]
    |> Chart.combine

[<Tests>]
let ``Box charts`` =
    testList "DistributionCharts.Box charts" [
        testCase "Box1 data" ( fun () ->
            """var data = [{"type":"box","x":["bin1","bin2","bin1","bin2","bin1","bin2","bin1","bin1","bin2","bin1"],"y":[2.0,1.5,5.0,1.5,3.0,2.5,2.5,1.5,3.5,1.0],"marker":{},"line":{},"boxpoints":"all","jitter":0.1}];"""
            |> chartGeneratedContains box1Chart
        );
        testCase "Box1 layout" ( fun () ->
            emptyLayout box1Chart
        );
        testCase "Box2 data" ( fun () ->
            """var data = [{"type":"box","x":[2.0,1.5,5.0,1.5,3.0,2.5,2.5,1.5,3.5,1.0],"y":["bin1","bin2","bin1","bin2","bin1","bin2","bin1","bin1","bin2","bin1"],"orientation":"h","marker":{},"line":{},"boxpoints":"all","jitter":0.1}];"""
            |> chartGeneratedContains box2Chart
        );
        testCase "Box2 layout" ( fun () ->
            emptyLayout box2Chart
        );
        testCase "Box3 data" ( fun () ->
            """var data = [{"type":"box","name":"bin1","marker":{},"line":{},"boxpoints":"all","jitter":0.1,"x":[2.0,1.5,5.0,1.5,3.0,2.5,2.5,1.5,3.5,1.0]},{"type":"box","name":"bin2","marker":{},"line":{},"boxpoints":"all","jitter":0.1,"x":[2.0,1.5,5.0,1.5,2.0,2.5,2.1,2.5,1.5,1.0,2.0,1.5,5.0,1.5,3.0,2.5,2.5,1.5,3.5,1.0]}];"""
            |> chartGeneratedContains box3Chart
        );
        testCase "Box3 layout" ( fun () ->
            emptyLayout box3Chart
        );
    ]


let violin1Chart =
    let y =  [2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1.]
    let x = ["bin1";"bin2";"bin1";"bin2";"bin1";"bin2";"bin1";"bin1";"bin2";"bin1"]
    Chart.Violin (
        X = x, Y = y,
        Points=StyleParam.JitterPoints.All, 
        UseDefaults = false
    )

let violin2Chart =
    let y =  [2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1.]
    let x = ["bin1";"bin2";"bin1";"bin2";"bin1";"bin2";"bin1";"bin1";"bin2";"bin1"]
    Chart.Violin(
        X = y, Y = x,
        Jitter=0.1,
        Points=StyleParam.JitterPoints.All,
        Orientation=StyleParam.Orientation.Horizontal,
        MeanLine=MeanLine.init(Visible=true), 
        UseDefaults = false
    )

let violin3Chart =
    let y =  [2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1.]
    let y' =  [2.; 1.5; 5.; 1.5; 2.; 2.5; 2.1; 2.5; 1.5; 1.;2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1.]
    [
        Chart.Violin (data = y , orientation = StyleParam.Orientation.Horizontal, Name="bin1",Jitter=0.1,Points=StyleParam.BoxPoints.All, UseDefaults = false)
        Chart.Violin (data = y', orientation = StyleParam.Orientation.Horizontal, Name="bin2",Jitter=0.1,Points=StyleParam.BoxPoints.All, UseDefaults = false)
    ]
    |> Chart.combine

[<Tests>]
let ``Violin charts`` =
    testList "DistributionCharts.Violin charts" [
        testCase "Violin1 data" ( fun () ->
            """var data = [{"type":"violin","x":["bin1","bin2","bin1","bin2","bin1","bin2","bin1","bin1","bin2","bin1"],"y":[2.0,1.5,5.0,1.5,3.0,2.5,2.5,1.5,3.5,1.0],"marker":{},"line":{},"box":{},"points":"all"}];"""
            |> chartGeneratedContains violin1Chart
        );
        testCase "Violin1 layout" ( fun () ->
            emptyLayout violin1Chart
        );
        testCase "Violin2 data" ( fun () ->
            """var data = [{"type":"violin","x":[2.0,1.5,5.0,1.5,3.0,2.5,2.5,1.5,3.5,1.0],"y":["bin1","bin2","bin1","bin2","bin1","bin2","bin1","bin1","bin2","bin1"],"orientation":"h","marker":{},"line":{},"box":{},"jitter":0.1,"meanline":{"visible":true},"points":"all"}];"""
            |> chartGeneratedContains violin2Chart
        );
        testCase "Violin2 layout" ( fun () ->
            emptyLayout violin2Chart
        );
        testCase "Violin3 data" ( fun () ->
            """var data = [{"type":"violin","name":"bin1","marker":{},"line":{},"box":{},"jitter":0.1,"points":"all","x":[2.0,1.5,5.0,1.5,3.0,2.5,2.5,1.5,3.5,1.0]},{"type":"violin","name":"bin2","marker":{},"line":{},"box":{},"jitter":0.1,"points":"all","x":[2.0,1.5,5.0,1.5,2.0,2.5,2.1,2.5,1.5,1.0,2.0,1.5,5.0,1.5,3.0,2.5,2.5,1.5,3.5,1.0]}];"""
            |> chartGeneratedContains violin3Chart
        );
        testCase "Violin3 layout" ( fun () ->
            emptyLayout violin3Chart
        );
    ]

let contourChart =
    // Generate linearly spaced vector
    let linspace (min,max,n) = 
        if n <= 2 then failwithf "n needs to be larger then 2"
        let bw = float (max - min) / (float n - 1.)
        [|min ..bw ..max|]
    
    // Create example data
    let size = 100
    let x = linspace(-2. * Math.PI, 2. * Math.PI, size)
    let y = linspace(-2. * Math.PI, 2. * Math.PI, size)
    
    let f x y = - (5. * x / (x**2. + y**2. + 1.) )
    
    let z = 
        Array.init size (fun i -> 
            Array.init size (fun j -> 
                f x.[j] y.[i] 
            )
        )

    Chart.Contour(zData = z, UseDefaults = false)
    |> Chart.withSize(600.,600.)

[<Tests>]
let ``Contour charts`` =
    testList "DistributionCharts.Contour charts" [
        testCase "Contour data" ( fun () ->
            "var data = [{\"type\":\"contour\",\"z\":[[0.3929110807586562,0.39272903726671055,0.3923748718856843,0.3918384347714509,0.39110921172503726,0.39017633288191317,0.38902858492457726"
            |> chartGeneratedContains contourChart
        );
        testCase "Contour layout" ( fun () ->
            "var layout = {\"width\":600,\"height\":600};"
            |> chartGeneratedContains contourChart
        );
    ]

let histogramContourChart =
    let normal (rnd:System.Random) mu tau =
        let mutable v1 = 2.0 * rnd.NextDouble() - 1.0
        let mutable v2 = 2.0 * rnd.NextDouble() - 1.0
        let mutable r = v1 * v1 + v2 * v2
        while (r >= 1.0 || r = 0.0) do
            v1 <- 2.0 * rnd.NextDouble() - 1.0
            v2 <- 2.0 * rnd.NextDouble() - 1.0
            r <- v1 * v1 + v2 * v2
        let fac = sqrt(-2.0*(log r)/r)
        (tau * v1 * fac + mu)
    
    let rnd = System.Random(5)
    let n = 2000
    let a = -1.
    let b = 1.2
    let step i = a +  ((b - a) / float (n - 1)) * float i
    
    //---------------------- generate data distributed in x and y direction ---------------------- 
    let x = Array.init n (fun i -> ((step i)**3.) + (0.3 * (normal (rnd) 0. 2.) ))
    let y = Array.init n (fun i -> ((step i)**6.) + (0.3 * (normal (rnd) 0. 2.) ))
    [
        Chart.Histogram2DContour (x = x, y = y,ContourLine=Line.init(Width=0.), UseDefaults = false)
        Chart.Point(x = x,y = y,Opacity=0.3, UseDefaults = false)
    ]
    |> Chart.combine


let histogram2DChart =
    let normal (rnd:System.Random) mu tau =
        let mutable v1 = 2.0 * rnd.NextDouble() - 1.0
        let mutable v2 = 2.0 * rnd.NextDouble() - 1.0
        let mutable r = v1 * v1 + v2 * v2
        while (r >= 1.0 || r = 0.0) do
            v1 <- 2.0 * rnd.NextDouble() - 1.0
            v2 <- 2.0 * rnd.NextDouble() - 1.0
            r <- v1 * v1 + v2 * v2
        let fac = sqrt(-2.0*(log r)/r)
        (tau * v1 * fac + mu)
    
    let rnd = System.Random(5)
    let n = 2000
    let a = -1.
    let b = 1.2
    let step i = a +  ((b - a) / float (n - 1)) * float i
    
    //---------------------- generate data distributed in x and y direction ---------------------- 
    let x = Array.init n (fun i -> ((step i)**3.) + (0.3 * (normal (rnd) 0. 2.) ))
    let y = Array.init n (fun i -> ((step i)**6.) + (0.3 * (normal (rnd) 0. 2.) ))
    Chart.Histogram2D (x = x, y = y, UseDefaults = false)

[<Tests>]
let ``Histogram 2D charts`` =
    testList "DistributionCharts.Histogram charts" [
        testCase "Histo contour data" ( fun () ->
            "var data = [{\"type\":\"histogram2dcontour\",\"x\":[-1.566002360265054,-1.833996340961623,-1.0330391275776571,-0.8476993487909306,-0.8471270832604864,-1.021055309868153,-0.5368298779218124,-0.9982579324563884,-0.6367576994858231,-1.433590036163408,-1.3735531103452598"
            |> chartGeneratedContains histogramContourChart
        );
        testCase "Histo contour layout" ( fun () ->
            emptyLayout histogramContourChart
        );
        testCase "Histo 2D data" ( fun () ->
            "var data = [{\"type\":\"histogram2d\",\"x\":[-1.566002360265054,-1.833996340961623,-1.0330391275776571,-0.8476993487909306,-0.8471270832604864,-1.021055309868153,-0.5368298779218124,-0.9982579324563884,-0.6367576994858231,-1.433590036163408,-1.3735531103452598"
            |> chartGeneratedContains histogram2DChart
        );
        testCase "Histo 2D layout" ( fun () ->
            emptyLayout histogram2DChart
        );
    ]


let scatterplotMatrixChart =
    let data = 
        [
            "A",[|1.;4.;3.4;0.7;|]
            "B",[|3.;1.5;1.7;2.3;|]
            "C",[|2.;4.;3.1;5.|]
            "D",[|4.;2.;2.;4.;|]
        ]
    Chart.Splom(keyValues = data, MarkerColor=Color.fromString "blue", UseDefaults = false)

[<Tests>]
let ``Scatterplot matrix charts`` =
    testList "DistributionCharts.Scatterplot matrix charts" [
        testCase "Scatterplot data" ( fun () ->
            """var data = [{"type":"splom","dimensions":[{"label":"A","values":[1.0,4.0,3.4,0.7],"axis":{}},{"label":"B","values":[3.0,1.5,1.7,2.3],"axis":{}},{"label":"C","values":[2.0,4.0,3.1,5.0],"axis":{}},{"label":"D","values":[4.0,2.0,2.0,4.0],"axis":{}}],"marker":{"color":"blue"},"diagonal":{}}];"""
            |> chartGeneratedContains scatterplotMatrixChart
        );
        testCase "Scatterplot layout" ( fun () ->
            emptyLayout scatterplotMatrixChart
        );
    ]

let pointDensityChart = 
    let rnd = new System.Random(5)
    let x = [for i in 0 .. 100 -> rnd.NextDouble()]
    let y = [for i in 0 .. 100 -> rnd.NextDouble()]
    Chart.PointDensity(x = x,y = y,UseDefaults = false)

let pointDensityChartStyled = 
    let rnd = new System.Random(5)
    let x = [for i in 0 .. 100 -> rnd.NextDouble()]
    let y = [for i in 0 .. 100 -> rnd.NextDouble()]
    Chart.PointDensity(
        x = x,
        y = y,
        PointMarkerColor = Color.fromKeyword Purple,
        PointMarkerSymbol = StyleParam.MarkerSymbol.X,
        PointMarkerSize = 4,
        ColorScale = StyleParam.Colorscale.Viridis,
        ColorBar = ColorBar.init(Title = Title.init("Density")),
        ShowContourLabels = true,
        UseDefaults = false
    )

[<Tests>]
let ``PointDensity charts`` =
    testList "DistributionCharts.PointDensity Charts" [
        testCase "PointDensity data" ( fun () ->
            """var data = [{"type":"histogram2dcontour","x":[0.33836984091362443,0.2844184475412678,0.2629626417825756,0.6253758443637638,0.46346185284827923,0.9283738280312968,0.1463105539541275,0.9505998873853124,0.5961332552116985,0.11745994590104555,0.975558924477342,0.37088692624628866,0.0699143670824889,0.07078822472635109,0.48201058175508427,0.15297147219673332,0.9641655045394625,0.09534371648698287,0.8125330809562156,0.2506162050415837,0.48126059979259067,0.07473527084790882,0.8369272271343168,0.7793545950107996,0.18997055114711195,0.7421991949631829,0.2328434778530353,0.7856600809775572,0.9278804142623583,0.10790790343094053,0.03301328235911824,0.770361295794305,0.30779169793603556,0.11389689665003536,0.388590590743623,0.9796536713743832,0.17214082375734152,0.7884985966554371,0.1994013894346549,0.7964705586416976,0.3436089406458703,0.10509170037931376,0.9796912223006092,0.8392714871276503,0.5432778380547081,0.1979652751227679,0.038267011306372944,0.5355382620056803,0.6352935864754456,0.8821615948724382,0.9909701128448221,0.9722291035448336,0.2536179266188377,0.5066026125599642,0.19606175189654423,0.2636345700657156,0.447491220406951,0.48360804677177593,0.4354052932166519,0.7212626578850964,0.6955303501782615,0.3606504729765702,0.022719473122954123,0.48822535178075793,0.08444666354192731,0.20519762868303695,0.06309522831025312,0.9560174704324536,0.682197633982728,0.5023569103807011,0.9808306484393918,0.17566690788402545,0.8959423270523279,0.016062522314518,0.9070072643957134,0.37616889941327686,0.0950440485472996,0.9976557400066665,0.2360767569560915,0.9920052760243441,0.70393218365681,0.6973052158473549,0.15036649450211156,0.04571881938992013,0.11693779058611849,0.060784178814284585,0.5167433691754674,0.8011890853760714,0.9178351447534912,0.1249560206779074,0.5321624509674322,0.6885327769855656,0.35309330343878514,0.47813873154955855,0.10094020846343608,0.9829584676693001,0.08237222725635963,0.4914658705198513,0.754824823585723,0.33808020937167116,0.1348700468125148],"y":[0.0822495408739194,0.8533406280229523,0.13293667609474466,0.9013309464330463,0.8153032049607966,0.07628677649250569,0.2375554043043197,0.5995953481642508,0.8198928524832674,0.16859052151841603,0.44983548040028454,0.24753128981568445,0.44340001719230787,0.017330474228286406,0.9982251343309065,0.21028397847445868,0.977000653733034,0.37128756119463946,0.023662484727642725,0.6884542595075696,0.2619061429341818,0.03818232567896243,0.5572416133048207,0.9701944594132688,0.29229787145382624,0.8225736044452403,0.4178035955027694,0.9151223138510819,0.9240487967264135,0.29379667215691724,0.6035781780274483,0.24283091642094354,0.8979965475844204,0.8571352292118293,0.6216826427828905,0.8439645878244026,0.0174298184073669,0.1443878729568738,0.30163458562532186,0.9844974023217788,0.2791879648711476,0.20159373721182056,0.09794229227022375,0.9563654991594914,0.0823269705671477,0.44100148716988113,0.9096932862464773,0.4608082573212722,0.10271507413252959,0.7726744891948414,0.10537157352332564,0.12017830932521183,0.7311623388580802,0.6496259498641016,0.872963903878333,0.04406721519495697,0.29609901471813166,0.16274221668147584,0.6090330749792201,0.9927296005155564,0.6584831809897363,0.3224330904532378,0.6755465514378374,0.5260961803263501,0.5650123434909677,0.20700456397934097,0.34953474223126413,0.5862647879804787,0.3956478314453959,0.15426054650650387,0.19285416006709177,0.8326127807761602,0.06965297556931757,0.03916508240586383,0.409266294636422,0.06031240572236125,0.9402400334087387,0.6008761141453293,0.8878674888461211,0.8512963842839452,0.912880318198763,0.9569953381814972,0.8124072397185523,0.15137430753157208,0.1884250986335916,0.4833998687022365,0.5116685775628633,0.24837059772031875,0.9841713253334963,0.5776154275879336,0.547865573106271,0.8546876017258911,0.5353547979776537,0.30890498510976555,0.3260142213320426,0.9567548744179099,0.5260471857739832,0.5718461119438736,0.3913531556685237,0.8753224065878067,0.09146674493861699],"line":{"width":0.0},"contours":{"coloring":"fill","showlines":false}},{"type":"scatter","opacity":0.3,"mode":"markers","x":[0.33836984091362443,0.2844184475412678,0.2629626417825756,0.6253758443637638,0.46346185284827923,0.9283738280312968,0.1463105539541275,0.9505998873853124,0.5961332552116985,0.11745994590104555,0.975558924477342,0.37088692624628866,0.0699143670824889,0.07078822472635109,0.48201058175508427,0.15297147219673332,0.9641655045394625,0.09534371648698287,0.8125330809562156,0.2506162050415837,0.48126059979259067,0.07473527084790882,0.8369272271343168,0.7793545950107996,0.18997055114711195,0.7421991949631829,0.2328434778530353,0.7856600809775572,0.9278804142623583,0.10790790343094053,0.03301328235911824,0.770361295794305,0.30779169793603556,0.11389689665003536,0.388590590743623,0.9796536713743832,0.17214082375734152,0.7884985966554371,0.1994013894346549,0.7964705586416976,0.3436089406458703,0.10509170037931376,0.9796912223006092,0.8392714871276503,0.5432778380547081,0.1979652751227679,0.038267011306372944,0.5355382620056803,0.6352935864754456,0.8821615948724382,0.9909701128448221,0.9722291035448336,0.2536179266188377,0.5066026125599642,0.19606175189654423,0.2636345700657156,0.447491220406951,0.48360804677177593,0.4354052932166519,0.7212626578850964,0.6955303501782615,0.3606504729765702,0.022719473122954123,0.48822535178075793,0.08444666354192731,0.20519762868303695,0.06309522831025312,0.9560174704324536,0.682197633982728,0.5023569103807011,0.9808306484393918,0.17566690788402545,0.8959423270523279,0.016062522314518,0.9070072643957134,0.37616889941327686,0.0950440485472996,0.9976557400066665,0.2360767569560915,0.9920052760243441,0.70393218365681,0.6973052158473549,0.15036649450211156,0.04571881938992013,0.11693779058611849,0.060784178814284585,0.5167433691754674,0.8011890853760714,0.9178351447534912,0.1249560206779074,0.5321624509674322,0.6885327769855656,0.35309330343878514,0.47813873154955855,0.10094020846343608,0.9829584676693001,0.08237222725635963,0.4914658705198513,0.754824823585723,0.33808020937167116,0.1348700468125148],"y":[0.0822495408739194,0.8533406280229523,0.13293667609474466,0.9013309464330463,0.8153032049607966,0.07628677649250569,0.2375554043043197,0.5995953481642508,0.8198928524832674,0.16859052151841603,0.44983548040028454,0.24753128981568445,0.44340001719230787,0.017330474228286406,0.9982251343309065,0.21028397847445868,0.977000653733034,0.37128756119463946,0.023662484727642725,0.6884542595075696,0.2619061429341818,0.03818232567896243,0.5572416133048207,0.9701944594132688,0.29229787145382624,0.8225736044452403,0.4178035955027694,0.9151223138510819,0.9240487967264135,0.29379667215691724,0.6035781780274483,0.24283091642094354,0.8979965475844204,0.8571352292118293,0.6216826427828905,0.8439645878244026,0.0174298184073669,0.1443878729568738,0.30163458562532186,0.9844974023217788,0.2791879648711476,0.20159373721182056,0.09794229227022375,0.9563654991594914,0.0823269705671477,0.44100148716988113,0.9096932862464773,0.4608082573212722,0.10271507413252959,0.7726744891948414,0.10537157352332564,0.12017830932521183,0.7311623388580802,0.6496259498641016,0.872963903878333,0.04406721519495697,0.29609901471813166,0.16274221668147584,0.6090330749792201,0.9927296005155564,0.6584831809897363,0.3224330904532378,0.6755465514378374,0.5260961803263501,0.5650123434909677,0.20700456397934097,0.34953474223126413,0.5862647879804787,0.3956478314453959,0.15426054650650387,0.19285416006709177,0.8326127807761602,0.06965297556931757,0.03916508240586383,0.409266294636422,0.06031240572236125,0.9402400334087387,0.6008761141453293,0.8878674888461211,0.8512963842839452,0.912880318198763,0.9569953381814972,0.8124072397185523,0.15137430753157208,0.1884250986335916,0.4833998687022365,0.5116685775628633,0.24837059772031875,0.9841713253334963,0.5776154275879336,0.547865573106271,0.8546876017258911,0.5353547979776537,0.30890498510976555,0.3260142213320426,0.9567548744179099,0.5260471857739832,0.5718461119438736,0.3913531556685237,0.8753224065878067,0.09146674493861699],"marker":{}}];"""
            |> chartGeneratedContains pointDensityChart
        );
        testCase "PointDensity layout" ( fun () ->
            emptyLayout pointDensityChart
        );
        testCase "PointDensity styled data" ( fun () ->
            """var data = [{"type":"histogram2dcontour","x":[0.33836984091362443,0.2844184475412678,0.2629626417825756,0.6253758443637638,0.46346185284827923,0.9283738280312968,0.1463105539541275,0.9505998873853124,0.5961332552116985,0.11745994590104555,0.975558924477342,0.37088692624628866,0.0699143670824889,0.07078822472635109,0.48201058175508427,0.15297147219673332,0.9641655045394625,0.09534371648698287,0.8125330809562156,0.2506162050415837,0.48126059979259067,0.07473527084790882,0.8369272271343168,0.7793545950107996,0.18997055114711195,0.7421991949631829,0.2328434778530353,0.7856600809775572,0.9278804142623583,0.10790790343094053,0.03301328235911824,0.770361295794305,0.30779169793603556,0.11389689665003536,0.388590590743623,0.9796536713743832,0.17214082375734152,0.7884985966554371,0.1994013894346549,0.7964705586416976,0.3436089406458703,0.10509170037931376,0.9796912223006092,0.8392714871276503,0.5432778380547081,0.1979652751227679,0.038267011306372944,0.5355382620056803,0.6352935864754456,0.8821615948724382,0.9909701128448221,0.9722291035448336,0.2536179266188377,0.5066026125599642,0.19606175189654423,0.2636345700657156,0.447491220406951,0.48360804677177593,0.4354052932166519,0.7212626578850964,0.6955303501782615,0.3606504729765702,0.022719473122954123,0.48822535178075793,0.08444666354192731,0.20519762868303695,0.06309522831025312,0.9560174704324536,0.682197633982728,0.5023569103807011,0.9808306484393918,0.17566690788402545,0.8959423270523279,0.016062522314518,0.9070072643957134,0.37616889941327686,0.0950440485472996,0.9976557400066665,0.2360767569560915,0.9920052760243441,0.70393218365681,0.6973052158473549,0.15036649450211156,0.04571881938992013,0.11693779058611849,0.060784178814284585,0.5167433691754674,0.8011890853760714,0.9178351447534912,0.1249560206779074,0.5321624509674322,0.6885327769855656,0.35309330343878514,0.47813873154955855,0.10094020846343608,0.9829584676693001,0.08237222725635963,0.4914658705198513,0.754824823585723,0.33808020937167116,0.1348700468125148],"y":[0.0822495408739194,0.8533406280229523,0.13293667609474466,0.9013309464330463,0.8153032049607966,0.07628677649250569,0.2375554043043197,0.5995953481642508,0.8198928524832674,0.16859052151841603,0.44983548040028454,0.24753128981568445,0.44340001719230787,0.017330474228286406,0.9982251343309065,0.21028397847445868,0.977000653733034,0.37128756119463946,0.023662484727642725,0.6884542595075696,0.2619061429341818,0.03818232567896243,0.5572416133048207,0.9701944594132688,0.29229787145382624,0.8225736044452403,0.4178035955027694,0.9151223138510819,0.9240487967264135,0.29379667215691724,0.6035781780274483,0.24283091642094354,0.8979965475844204,0.8571352292118293,0.6216826427828905,0.8439645878244026,0.0174298184073669,0.1443878729568738,0.30163458562532186,0.9844974023217788,0.2791879648711476,0.20159373721182056,0.09794229227022375,0.9563654991594914,0.0823269705671477,0.44100148716988113,0.9096932862464773,0.4608082573212722,0.10271507413252959,0.7726744891948414,0.10537157352332564,0.12017830932521183,0.7311623388580802,0.6496259498641016,0.872963903878333,0.04406721519495697,0.29609901471813166,0.16274221668147584,0.6090330749792201,0.9927296005155564,0.6584831809897363,0.3224330904532378,0.6755465514378374,0.5260961803263501,0.5650123434909677,0.20700456397934097,0.34953474223126413,0.5862647879804787,0.3956478314453959,0.15426054650650387,0.19285416006709177,0.8326127807761602,0.06965297556931757,0.03916508240586383,0.409266294636422,0.06031240572236125,0.9402400334087387,0.6008761141453293,0.8878674888461211,0.8512963842839452,0.912880318198763,0.9569953381814972,0.8124072397185523,0.15137430753157208,0.1884250986335916,0.4833998687022365,0.5116685775628633,0.24837059772031875,0.9841713253334963,0.5776154275879336,0.547865573106271,0.8546876017258911,0.5353547979776537,0.30890498510976555,0.3260142213320426,0.9567548744179099,0.5260471857739832,0.5718461119438736,0.3913531556685237,0.8753224065878067,0.09146674493861699],"line":{"width":0.0},"colorbar":{"title":{"text":"Density"}},"colorscale":"Viridis","contours":{"coloring":"fill","showlabels":true,"showlines":false}},{"type":"scatter","opacity":0.3,"mode":"markers","x":[0.33836984091362443,0.2844184475412678,0.2629626417825756,0.6253758443637638,0.46346185284827923,0.9283738280312968,0.1463105539541275,0.9505998873853124,0.5961332552116985,0.11745994590104555,0.975558924477342,0.37088692624628866,0.0699143670824889,0.07078822472635109,0.48201058175508427,0.15297147219673332,0.9641655045394625,0.09534371648698287,0.8125330809562156,0.2506162050415837,0.48126059979259067,0.07473527084790882,0.8369272271343168,0.7793545950107996,0.18997055114711195,0.7421991949631829,0.2328434778530353,0.7856600809775572,0.9278804142623583,0.10790790343094053,0.03301328235911824,0.770361295794305,0.30779169793603556,0.11389689665003536,0.388590590743623,0.9796536713743832,0.17214082375734152,0.7884985966554371,0.1994013894346549,0.7964705586416976,0.3436089406458703,0.10509170037931376,0.9796912223006092,0.8392714871276503,0.5432778380547081,0.1979652751227679,0.038267011306372944,0.5355382620056803,0.6352935864754456,0.8821615948724382,0.9909701128448221,0.9722291035448336,0.2536179266188377,0.5066026125599642,0.19606175189654423,0.2636345700657156,0.447491220406951,0.48360804677177593,0.4354052932166519,0.7212626578850964,0.6955303501782615,0.3606504729765702,0.022719473122954123,0.48822535178075793,0.08444666354192731,0.20519762868303695,0.06309522831025312,0.9560174704324536,0.682197633982728,0.5023569103807011,0.9808306484393918,0.17566690788402545,0.8959423270523279,0.016062522314518,0.9070072643957134,0.37616889941327686,0.0950440485472996,0.9976557400066665,0.2360767569560915,0.9920052760243441,0.70393218365681,0.6973052158473549,0.15036649450211156,0.04571881938992013,0.11693779058611849,0.060784178814284585,0.5167433691754674,0.8011890853760714,0.9178351447534912,0.1249560206779074,0.5321624509674322,0.6885327769855656,0.35309330343878514,0.47813873154955855,0.10094020846343608,0.9829584676693001,0.08237222725635963,0.4914658705198513,0.754824823585723,0.33808020937167116,0.1348700468125148],"y":[0.0822495408739194,0.8533406280229523,0.13293667609474466,0.9013309464330463,0.8153032049607966,0.07628677649250569,0.2375554043043197,0.5995953481642508,0.8198928524832674,0.16859052151841603,0.44983548040028454,0.24753128981568445,0.44340001719230787,0.017330474228286406,0.9982251343309065,0.21028397847445868,0.977000653733034,0.37128756119463946,0.023662484727642725,0.6884542595075696,0.2619061429341818,0.03818232567896243,0.5572416133048207,0.9701944594132688,0.29229787145382624,0.8225736044452403,0.4178035955027694,0.9151223138510819,0.9240487967264135,0.29379667215691724,0.6035781780274483,0.24283091642094354,0.8979965475844204,0.8571352292118293,0.6216826427828905,0.8439645878244026,0.0174298184073669,0.1443878729568738,0.30163458562532186,0.9844974023217788,0.2791879648711476,0.20159373721182056,0.09794229227022375,0.9563654991594914,0.0823269705671477,0.44100148716988113,0.9096932862464773,0.4608082573212722,0.10271507413252959,0.7726744891948414,0.10537157352332564,0.12017830932521183,0.7311623388580802,0.6496259498641016,0.872963903878333,0.04406721519495697,0.29609901471813166,0.16274221668147584,0.6090330749792201,0.9927296005155564,0.6584831809897363,0.3224330904532378,0.6755465514378374,0.5260961803263501,0.5650123434909677,0.20700456397934097,0.34953474223126413,0.5862647879804787,0.3956478314453959,0.15426054650650387,0.19285416006709177,0.8326127807761602,0.06965297556931757,0.03916508240586383,0.409266294636422,0.06031240572236125,0.9402400334087387,0.6008761141453293,0.8878674888461211,0.8512963842839452,0.912880318198763,0.9569953381814972,0.8124072397185523,0.15137430753157208,0.1884250986335916,0.4833998687022365,0.5116685775628633,0.24837059772031875,0.9841713253334963,0.5776154275879336,0.547865573106271,0.8546876017258911,0.5353547979776537,0.30890498510976555,0.3260142213320426,0.9567548744179099,0.5260471857739832,0.5718461119438736,0.3913531556685237,0.8753224065878067,0.09146674493861699],"marker":{"color":"rgba(128, 0, 128, 1.0)","size":4,"symbol":"4"}}];"""
            |> chartGeneratedContains pointDensityChartStyled
        );
        testCase "PointDensity styled layout" ( fun () ->
            emptyLayout pointDensityChartStyled
        );
    ]